---
import '~/styles/global.css';
import Layout from '~/layouts/Layout.astro';
import Header from '~/layouts/Header.astro';
import Footer from '~/layouts/Footer.astro';
import DeviceUpdateSubscribe from '~/components/DeviceUpdateSubscribe.astro';

import Scene from '~/lit/scene';
import View from '~/lit/view';
---

<Layout title="Wavy Industries: device update">
	<main>
		<Header />
		<section>
			<Scene id="scene-main">

				<View name="disconnected" active>
					<div>
						<h1>Device updater</h1>
						<span class="catch-phrase">Bluetooth device updater directly in the browser</span><br/><br/>
						<Scene id="scene-bluetooth">
							<View name="checking" active></View>
							<View name="unavailable">
							<div>
								<p>It looks like your browser is not supported üôÅ</p>
								<p>Notably <b>Safari</b> and <b>Firefox</b> is not supported. Here are some suggested alternatives:</p>
								<ul>
									<li><b>macOS: </b>Chrome, Arc, Opera, Edge</li>
									<li><b>iOS/iPadOS: </b><a href="https://apps.apple.com/us/app/bluefy-web-ble-browser/id1492822055">Bluefy</a></li>
									<li><b>Android: </b>Chrome</li>
									<li><b>Windows: </b>Chrome, Opera, Edge</li>
								</ul>
							</div>
							</View>
							<View name="available">
							<div>
								<span>Note: Make sure your Wavy device isn't already connected to this or another device. If it is, this app won‚Äôt be able to find it.</span><br/><br/>
								<button id="button-connect" type="submit" class="btn btn-primary"><i class="bi-bluetooth"></i>Find device via Bluetooth</button>
							</div>
							</View>
						</Scene>
					</div>
				</View>

				<View name="connected">
					<div>
						<button id="button-disconnect" type="submit"><i class="bi-x-square"></i> Disconnect</button>
						<b><span id="device-name">unknown name</span></b><div id="device-connection-status" />
						<p>
							Device firmware version: <span id="device-fw-version"></span><br/>
							Latest firmware version: <span id="latest-fw-version"></span>
						</p>
						<br/>
		
						<Scene id="scene-updating">
							<View name="waiting" active>
								<p>Waiting on device information...</p>
							</View>
							<View name="done">
								<span>Your device is up to date!</span>
							</View>
							<View name="update-available">
								<span>Update is available!</span><br/>
								<button id="update-button">Start update</button>
							</View>
							<View name="preparing">
								<span>Fetching update and preparing device...</span>
							</View>
							<View name="uploading">
								Progress: <span id="upload-status"></span>
							</View>
							<View name="upload-complete">
								<span>Transfer complete! Device will reboot and finish installation...</span>
							</View>
						</Scene>
						<hr />
						<h2>Changelog</h2>
						<p id="changelog"></p>
					</div>
				</View>

			</Scene>
			<br />
			<hr />
			<DeviceUpdateSubscribe />
		</section>
		<Footer />
	</main>
</Layout>

<style>
main {
	min-height: 100vh;
	display: flex;
	flex-direction: column;
}
section {
	width: 100%;
	padding: 0 20px;
}

.catch-phrase {
	font-size: 20px;
	font-weight: 300;
	margin-block-start: 0em;
	margin-block-end: 0em;
}

#device-connection-status {
	width: 15px;
	height: 15px;
	margin: 0 5px;
	border-radius: 50%;
	display: inline-block;
	background-color: green;
}

</style>

<script>
import {parseChangelog, Changelog} from '~/js/parsers/changelog_parser';
import {MCUManager} from '~/js/mcumgr/mcumgr.js';
import { ImageManager, ImageFirmwareVersion } from '~/js/mcumgr/ImageManager';
import Scene from '~/lit/scene';

const product_name = "MONKEY";
const mcumgr = new MCUManager();
const imageManager = new ImageManager(mcumgr);

let firmwareVersions: Changelog = null;
let deviceFirmwareVersion: ImageFirmwareVersion = null;

/* initialise the view */
type MainSceneViews = 'disconnected' | 'connected';
const mainScene = document.getElementById('scene-main') as Scene<MainSceneViews>;

type BluetoothSceneViews = 'checking' | 'unavailable' | 'available';
const bluetoothScene = document.getElementById('scene-bluetooth') as Scene<BluetoothSceneViews>;

type UpdateScreens = 'waiting' | 'done' | 'update-available' | 'preparing' | 'uploading' | 'upload-complete';
const updateScene = document.getElementById('scene-updating') as Scene<UpdateScreens>;

Scene.ready.then(() => {
	mainScene.on('show', 'connected', () => {
		deviceName.innerText = mcumgr.name;
		getFirmwareUpdates();
		getDeviceFirmware();
	});
	
	mainScene.on('hide', 'connected', () => {
		changelog.innerHTML = "";
	});
	
	// @ts-ignore: Ignore TypeScript error for bluetooth property because its not yet part of linter
	if (navigator && navigator.bluetooth && navigator.bluetooth.getAvailability()) {
		bluetoothScene.set('available')
	} else {
		bluetoothScene.set('unavailable')
	}
});

/* all elements used */ 
const connectButton = document.getElementById('button-connect') as HTMLButtonElement;
const disconnectButton = document.getElementById('button-disconnect') as HTMLButtonElement;

const deviceName = document.getElementById('device-name');
const deviceConnectionStatus = document.getElementById('device-connection-status');
const deviceFWVersion = document.getElementById('device-fw-version');
const latestFWVersion = document.getElementById('latest-fw-version');

const updateButton = document.getElementById('update-button') as HTMLButtonElement;
const uploadStatus = document.getElementById('upload-status') as HTMLButtonElement;

const changelog = document.getElementById('changelog');
/* elements end */ 

mcumgr.onConnecting = () => {
	console.log('Connecting...');
	connectButton.disabled = true;
	connectButton.innerText = 'Connecting...';
}
mcumgr.onConnect = () => {
	mainScene.set('connected');
}

const defaultButtonText = connectButton.innerText;
mcumgr.onDisconnect = () => {
	connectButton.disabled = false;
	connectButton.innerText = defaultButtonText;
	mainScene.set('disconnected');
}

let connectionReestablishedResolver: (value: unknown) => void | null = null;

mcumgr.onConnectionLoss = () => deviceConnectionStatus.style.backgroundColor = 'red';

mcumgr.onConnectionReestablished = () => {
	deviceConnectionStatus.style.backgroundColor = 'green';
	connectionReestablishedResolver?.(null);
}

connectButton.addEventListener('click', async () => {
	const BT_MIDI_SERVICE_UUID = '03B80E5A-EDE8-4B33-A751-6CE34EC4C700'.toLowerCase()
	let filters = [{namePrefix: 'WAVY MONKEY', services: [BT_MIDI_SERVICE_UUID]}]
	await mcumgr.connect(filters);
});

disconnectButton.addEventListener('click', async () => {
	mcumgr.disconnect();
});

updateButton.addEventListener('click', deviceUpdateScript);

async function getFirmwareUpdates() {
	const response = await fetch(`/firmware/${product_name}/changelog.md`);
	const data = await response.text();
	firmwareVersions = parseChangelog(data);
	updateAvailableUpdate();

	latestFWVersion.innerText = firmwareVersions.release.versionString;

	firmwareVersions.versions.forEach((version) => {
		if (version.isDev == true || version.isObsolete == true) {
			return;
		}

		let changeHTML = `<details>`
			changeHTML += `<summary>${version.version.versionString}${version.highlight != null ? ' ' + version.highlight : ''}</summary>`;
			changeHTML += `<p><ul>`;
		version.changes.forEach((change) => {
			changeHTML += `<li>${change}</li>`;
		});
		changeHTML += `</ul></p>`;
		changeHTML += `</details>`
		changelog.innerHTML += changeHTML;
	});
}

async function getDeviceFirmware() {
	const fw = await imageManager.getFirmwareVersion();
	deviceFWVersion.innerText = fw.versionString;
	deviceFirmwareVersion = fw; 
	updateAvailableUpdate();
}

function updateAvailableUpdate() {
	if (deviceFirmwareVersion == null || firmwareVersions == null) {
		return;
	}

	if (deviceFirmwareVersion.versionString != firmwareVersions.release.versionString) {
		updateScene.set('update-available');
	} else {
		updateScene.set('done');
	}
}


async function deviceUpdateScript() {

	try {

		const updateApplied = new Promise((resolve, _) => {
			connectionReestablishedResolver = resolve;
		});

		updateScene.set('preparing')

		const image = await fetch(`/firmware/${product_name}/app\_update_${firmwareVersions.release.versionString}.bin`)
			.then(res => res.arrayBuffer())
	
		uploadStatus.innerText = "0%";
		updateScene.set('uploading')

		await imageManager.uploadImage(image, (percent) => {uploadStatus.innerText = `${percent}%`});

		updateScene.set('upload-complete');

		await updateApplied;

		updateScene.set('done');

	} catch (e) {
		updateScene.set('update-available');
	}

}
</script>