---
import '~/styles/global.css';
import Layout from '~/layouts/Layout.astro';
import Header from '~/layouts/Header.astro';
import DeviceUpdateSubscribe from '~/components/DeviceUpdateSubscribe.astro';
---

<Layout title="Wavy Industries: device update">
	<main>
		<Header />
		<div id="screens">
			<div id="initial-screen" class="screen">
				<h2>Bluetooth device updater directly in the browser</h2>
				<div id="bt-unavailable-screen" class="screen">
					<p>It looks like your browser is not supported üôÅ</p>
					<p>Supported browsers (others might also work):</p>
					<ul>
						<li><b>macOS: </b>Chrome, Arc, Opera, Edge</li>
						<li><b>Windows: </b>Chrome, Opera, Edge</li>
						<li><b>Android: </b>Chrome</li>
						<li><b>iOS/iPadOS: </b>Bluefy</li>
					</ul>
				</div>
				<div id="bt-available-screen" class="screen">
					<span>Currently supports <b>WAVY MONKEY</b>.</span><br/><br/>
					<span class="remark">Note: Your device will not appear if it is connected to something. If your device is stil not appearing, reboot the device.</span><br/><br/>
					<button id="button-connect" type="submit" class="btn btn-primary button-connect"><i class="bi-bluetooth"></i>Connect via Bluetooth</button>
				</div>
			</div>
			
			<div id="reconnect-screen" class="screen">
				<span class="remark">Waiting for device to reconnect..</span><br/><br/>
			</div>

			<div id="connected-screen" class="screen">
				<button id="button-disconnect" type="submit"><i class="bi-x-square"></i> Disconnect</button>
				<b><span id="device-name">unknown name</span></b>
				<p>
					Device firmware version: <span id="device-fw-version"></span><br/>
					Latest firmware version: <span id="latest-fw-version"></span>
				</p>
				<br/>

				<div id="update-waiting-screen" class="screen">
					<p>Waiting on device information...</p>
				</div>
				<div id="update-good-screen" class="screen">
					<span class="ok">Your device is up to date!</span>
				</div>
				<div id="update-idle-screen" class="screen">
					<span class="remark">Update is available!</span><br/>
					<button id="update-button" class="button-highlight" >Start update</button>
					<hr />
					<h3>Changes</h3>
					<p id="changelog"></p>
				</div>
				<div id="update-prepare-screen" class="screen">
					<span>Fetching update and preparing device...</span>
				</div>
				<div id="update-uploading-screen" class="screen">
					Progress: <span id="upload-status"></span>
				</div>
				<div id="update-complete-screen" class="screen">
					<span class="ok">Transfer complete! Device will reboot and finish installation...</span>
				</div>				
			</div>
			<br />
			<hr />
			<DeviceUpdateSubscribe />
		</div>
	</main>
</Layout>

<style>
#screens {
	margin-top: 50px;
	margin-left: 30px;
	margin-right: 30px;
}

.screen {
    display: none;
}

p {
	font-size: 16px;
}
.remark {
	background-color: #E4E3DD;
}
.error {
	background-color: #FFD6D6;
}
.ok {
	background-color: #D6FFD6;
}
.button-highlight {
	background-color: #acffac;
}
.button-connect {
	background-color: #3943d7;
	color: white;
}
</style>

<script>
const product_name = "MONKEY";

// infer from changelog
const firmwareVerions = {
	"MONKEY": "1.0.0",
}

/* initialise the view */
import {Screens} from '~/js/screens.js';
const screens = new Screens('initial-screen', ['initial-screen', 'connected-screen', 'reconnect-screen']);
screens.on('connected-screen', () => {
	changelog.innerHTML = "";
}, "hide");

const initialScreens = new Screens(null, ['bt-available-screen', 'bt-unavailable-screen']);
const updateScreens = new Screens('update-waiting-screen', ['update-waiting-screen', 'update-good-screen', 'update-idle-screen', 'update-prepare-screen', 'update-uploading-screen', 'update-complete-screen']);

if (navigator && navigator.bluetooth && navigator.bluetooth.getAvailability()) {
	initialScreens.set('bt-available-screen');
} else {
	initialScreens.set('bt-unavailable-screen');
}

/* all elements used */ 
const connectButton = document.getElementById('button-connect');
const disconnectButton = document.getElementById('button-disconnect');

const deviceName = document.getElementById('device-name');
const deviceFWVersion = document.getElementById('device-fw-version');
const latestFWVersion = document.getElementById('latest-fw-version');

const updateButton = document.getElementById('update-button');
const uploadStatus = document.getElementById('upload-status');

const changelog = document.getElementById('changelog');
	
import {MCUManager, MGMT_GROUP_ID, OS_MGMT_ID, IMG_MGMT_ID} from '~/js/mcumgr.js';
const mcumgr = new MCUManager();
mcumgr.onConnecting(() => {
	console.log('Connecting...');
	connectButton.disabled = true;
	connectButton.innerText = 'Connecting...';
});
mcumgr.onConnect(() => {
	deviceName.innerText = mcumgr.name;
	mcumgr.cmdImageState();
	latestFWVersion.innerHTML = firmwareVerions[product_name];
	screens.set('connected-screen')
});
mcumgr.onDisconnect(() => {
	connectButton.disabled = false;
	connectButton.innerText = 'Connect via Bluetooth';
	screens.set('initial-screen')
});
mcumgr.onConnectionLoss(() => {
	screens.set('reconnect-screen')
});

mcumgr.onMessage(({ op, group, id, data, length }) => {
	switch (group) {
		case MGMT_GROUP_ID.OS:
			switch (id) {
				case OS_MGMT_ID.ECHO:
					alert(data.r);
					break;
				case OS_MGMT_ID.TASKSTAT:
					console.table(data.tasks);
					break;
				case OS_MGMT_ID.MPSTAT:
					console.log(data);
					break;
			}
			break;
		case MGMT_GROUP_ID.IMAGE:
			switch (id) {
				// get info about the current images. Figure out current image and version
				case IMG_MGMT_ID.STATE:					
					data.images.forEach(image => {
						if (image.active) {
							deviceFWVersion.innerHTML = image.version
							let deviceVersion = version_from_string(image.version);
							let latestVersion = version_from_string(firmwareVerions[product_name]);
							if (compare_versions(deviceVersion, latestVersion) < 0) {
								updateScreens.set('update-idle-screen');
								fetch_changelog(product_name, deviceVersion, latestVersion)
									.then(changelog => {
										publish_changelog(changelog);
									})
							} else {
								updateScreens.set('update-good-screen');
							}
						}
					})
					break;
			}
			break;
		default:
			console.log('Unknown group');
			break;
	}
});

mcumgr.onImageUploadProgress(({ percentage }) => {
	if (percentage != 0 && updateScreens.get() != 'update-uploading-screen') {
		updateScreens.set('update-uploading-screen');
	}
	uploadStatus.innerText = `${percentage}%`;
});

mcumgr.onImageUploadFinished(() => {
	updateScreens.set('update-complete-screen');
});

connectButton.addEventListener('click', async () => {
	const BT_MIDI_SERVICE_UUID = '03B80E5A-EDE8-4B33-A751-6CE34EC4C700'.toLowerCase()
	let filters = [{namePrefix: 'WAVY MONKEY', services: [BT_MIDI_SERVICE_UUID]}]
	await mcumgr.connect(filters);
});

disconnectButton.addEventListener('click', async () => {
	mcumgr.disconnect();
});

updateButton.addEventListener('click', async () => {
	try {
		updateScreens.set('update-prepare-screen');
		fetch(`/firmware/${product_name}/app\_update_${firmwareVerions[product_name]}.bin`)
			.then(res => res.arrayBuffer())
			.then(res => {
				mcumgr.cmdUpload(res);
			})
	} catch (e) {
		updateScreens.set('update-idle-screen');
	}
});

function version_from_string(version) {
	// return a list of major, minor and patch version numbers
	return version.split('.').map(Number);
}

// Function to compare version arrays, 1 if left is bigger, -1 if right is bigger, 0 if equal
function compare_versions(v1, v2) {
	for (let i = 0; i < v1.length; i++) {
		if (v1[i] < v2[i]) return -1;
		if (v1[i] > v2[i]) return 1;
	}
	return 0;
}

async function get_newest_version(product_name) {
	let json = await fetch(`/firmware/${product_name}/changelog.json`)
		.then(res => res.json());

	// map values from string to version arrays
	let state = json.state;
	state.stable = version_from_string(state.stable);
	state.unstable = version_from_string(state.unstable);

	return state
}

async function fetch_changelog(product_name, version_min, version_max) {
	let json = await fetch(`/firmware/${product_name}/changelog.json`)
		.then(res => res.json());

    // Filter versions within the specified range
    let filteredVersions = json.versions.filter(version => {
        let ver = [version.major, version.minor, version.patch];
        return compare_versions(ver, version_min) > 0 && compare_versions(ver, version_max) <= 0;
    });

    // Sort the filtered versions
    filteredVersions.sort((a, b) => {
        return -compare_versions([a.major, a.minor, a.patch], [b.major, b.minor, b.patch]);
    });

    // Return or process the sorted and filtered list
    return filteredVersions;
}

function publish_changelog(data) {
	changelog.innerHTML = "";
	data.forEach(version => {
		changelog.innerHTML += `<b>${version.major}.${version.minor}.${version.patch}</b><br/><ul>`;
		version.changes.forEach(change => {
			changelog.innerHTML += `<li>${change}</li>`;
		});
		changelog.innerHTML += "</ul><br/>"
	});
}
</script>