---
import '~/styles/global.css';
import Layout from '~/layouts/Layout.astro';
import Header from '~/layouts/Header.astro';
import Footer from '~/layouts/Footer.astro';
---

<Layout title="Wavy Industries: device update">
	<main>
		<Header />
		<section id="screens">
			<div id="initial-screen" class="screen">
				<h1>Sample updater</h1>
				<span class="catch-phrase">Upload new drum samples to MONKEY</span><br/><br/>
				<div id="bt-unavailable-screen" class="screen">
					<p>It looks like your browser is not supported üôÅ</p>
					<p>Notably <b>Safari</b> and <b>Firefox</b> is not supported. Here are some suggested alternatives:</p>
					<ul>
						<li><b>macOS: </b>Chrome, Arc, Opera, Edge</li>
						<li><b>iOS/iPadOS: </b><a href="https://apps.apple.com/us/app/bluefy-web-ble-browser/id1492822055">Bluefy</a></li>
						<li><b>Android: </b>Chrome</li>
						<li><b>Windows: </b>Chrome, Opera, Edge</li>
					</ul>
				</div>
				<div id="bt-available-screen" class="screen">
					<span class="remark">Note: Make sure your Wavy device isn't already connected to this or another device. If it is, this app won‚Äôt be able to find it.</span><br/><br/>
					<button id="button-connect" type="submit" class="btn btn-primary button-connect"><i class="bi-bluetooth"></i>Find device via Bluetooth</button>
				</div>
			</div>
			
			<div id="reconnect-screen" class="screen">
				<span class="remark">Waiting for device to reconnect..</span><br/><br/>
			</div>

			<div id="connected-screen" class="screen">
				<button id="button-disconnect" type="submit"><i class="bi-x-square"></i> Disconnect</button>
				<b><span id="device-name">unknown name</span></b>

				<br/>

				<div id="update-update-screen" class="screen">
					<button id="update-button" class="button-highlight" >Update device samples</button>
					<button id="fetch-button" class="button-highlight" >Fetch device samples</button>
                    <button id="samples-log-button" class="button-highlight" >Show samples log</button>
				</div>
				<div id="update-uploading-screen" class="screen">
					Progress: <span id="upload-status"></span>
				</div>			
			</div>
		</section>
		<Footer />
	</main>
</Layout>

<style>
main {
	min-height: 100vh;
	display: flex;
	flex-direction: column;
}
section {
	width: 100%;
	padding: 0 20px;
}

h1 {
	margin-block-start: 0em;
	margin-block-end: 0em;
}

.catch-phrase {
	font-size: 20px;
	font-weight: 300;
	margin-block-start: 0em;
	margin-block-end: 0em;
}

.screen {
    display: none;
}

p {
	font-size: 16px;
}
.remark {
	background-color: #E4E3DD;
}
.error {
	background-color: #FFD6D6;
}
.ok {
	background-color: #D6FFD6;
}
.button-highlight {
	background-color: #acffac;
}
</style>

<script>

import {MCUManager} from '~/js/mcumgr/mcumgr.js';
import { SampleManager } from '~/js/mcumgr/SampleManager';
import {BasicManager} from '~/js/mcumgr/BasicManager';
import { generateDummySamples } from '~/js/parsers/samples_parser';
import {Screens} from '~/js/screens.js';
import { Log, canonicalize } from '~/js/utilities';
import { samplesParser_encode, samplesParser_decode } from '~/js/parsers/samples_parser';

let log = new Log('main', Log.LEVEL_DEBUG);

const mcumgr = new MCUManager();
const sampleManager = new SampleManager(mcumgr);
const basicManager = new BasicManager(mcumgr);

/* initialise the view */
const mainScreens = new Screens('initial-screen', ['initial-screen', 'connected-screen', 'reconnect-screen']);
const initialScreens = new Screens(null, ['bt-available-screen', 'bt-unavailable-screen']);
const updateScreens = new Screens('update-update-screen', ['update-update-screen', 'update-uploading-screen']);

mainScreens.on('connected-screen', () => {
	deviceName.innerText = mcumgr.name;
}, "show");

mainScreens.on('connected-screen', () => {}, "hide");


// @ts-ignore: Ignore TypeScript error for bluetooth property because its not yet part of linter
if (navigator && navigator.bluetooth && navigator.bluetooth.getAvailability()) {
	initialScreens.set('bt-available-screen');
} else {
	initialScreens.set('bt-unavailable-screen');
}

/* all elements used */ 
const connectButton = document.getElementById('button-connect') as HTMLButtonElement;
const disconnectButton = document.getElementById('button-disconnect') as HTMLButtonElement;

const deviceName = document.getElementById('device-name');

const uploadButton = document.getElementById('update-button') as HTMLButtonElement;
const fetchButton = document.getElementById('fetch-button') as HTMLButtonElement;
const uploadStatus = document.getElementById('upload-status') as HTMLButtonElement;

const samplesLogButton = document.getElementById('samples-log-button') as HTMLButtonElement;

/* elements end */ 

mcumgr.onConnecting(() => {
	console.log('Connecting...');
	connectButton.disabled = true;
	connectButton.innerText = 'Connecting...';
});
mcumgr.onConnect(() => {
	mainScreens.set('connected-screen')

	// send poll command such that the device can expect data transfer and increase communication speed
	basicManager.poll();
});

const defaultButtonText = connectButton.innerText;
mcumgr.onDisconnect(() => {
	connectButton.disabled = false;
	connectButton.innerText = defaultButtonText;
	mainScreens.set('initial-screen')
});

mcumgr.onConnectionLoss(() => {
	mainScreens.set('reconnect-screen')
});

sampleManager.onUploadProgress((percentage) => {
	if (percentage != 0 && updateScreens.get() != 'update-uploading-screen') {
		updateScreens.set('update-uploading-screen');
	}
	uploadStatus.innerText = `${percentage}%`;
});

sampleManager.onUploadComplete((success) => {
    updateScreens.set('update-update-screen');
	if (!success) {
		log.error('Failed to upload samples');
	} else {
        log.info('Samples uploaded successfully');
	}
});

connectButton.addEventListener('click', async () => {
	const BT_MIDI_SERVICE_UUID = '03B80E5A-EDE8-4B33-A751-6CE34EC4C700'.toLowerCase()
	let filters = [{namePrefix: 'WAVY MONKEY', services: [BT_MIDI_SERVICE_UUID]}]
	await mcumgr.connect(filters);
});

disconnectButton.addEventListener('click', async () => {
	mcumgr.disconnect();
});

uploadButton.addEventListener('click', async () => {
    let dummySamples = generateDummySamples();
    await sampleManager.uploadSamples(dummySamples);
});

fetchButton.addEventListener('click', async () => {
	try {
		let samples = await sampleManager.downloadSamples();
		log.info("Fetched samples:");
		log.info(samples);
	} catch (e) {
		log.error("Failed to fetch samples");
	}
});

samplesLogButton.addEventListener('click', async () => {
    let dummySamples = generateDummySamples();
    let samples = samplesParser_encode(dummySamples);
	log.info("Encoded samples:");
    log.info(samples);
	let decodedSamples = samplesParser_decode(samples);
	log.info("Decoded samples:");
	log.info(decodedSamples);
	// check if its the same as the original
	let equal = JSON.stringify(canonicalize(dummySamples)) == JSON.stringify(canonicalize(decodedSamples))
	log.info(`Are the samples equal? ${equal}`);
});

</script>