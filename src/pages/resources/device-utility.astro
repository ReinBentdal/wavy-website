---
import '~/styles/global.css';
import '~/styles/device-utility.css';
import Layout from '~/layouts/Layout.astro';
import Header from '~/layouts/Header.astro';
import Footer from '~/layouts/Footer.astro';
import DeviceUpdateSubscribe from '~/components/DeviceUpdateSubscribe.astro';

import Scene from '~/lit/scene';
import View from '~/lit/view';

import MonkeyProgramImg from '~/assets/resources/device-tools/monkey_program.png';
---

<Layout title="Wavy Industries: device utility">
	<main>
		<Header />
		<section style="flex-grow: 2; display: flex; flex-direction: column; align-items: center;">
			<Scene id="scene-main">

				<View name="disconnected" active>
					<div class="main-content">
						<img src={MonkeyProgramImg.src} alt="Monkey programmer" id="programmer-monkey" />
						<div style="display:flex; align-items: center; flex-direction: column;">
							<h1>device utility</h1>
							<span class="tagline">update and configure your device directly in the browser!</span>
						</div>
						<Scene id="scene-bluetooth">
							<View name="checking" active></View>
							<View name="unavailable">
							<p class="note" style="text-align: center;">
								It looks like your browser is not supported :/<br />
								<span id="browser-support-note"></span>
							</p>
							</View>
							<View name="available">
							<button id="button-connect" type="submit" class="btn btn-primary"><i class="bi-bluetooth"></i>Connect</button>
						</View>
						</Scene>
						<p id="connect-problem-note" class="hidden note" style="max-width: 400px; text-align: center;">If you have problems finding your device, make sure it is not already connected to something else.</p>
					</div>
				</View>

				<View name="connected">

					<!-- header -->
					<header>
						<span>
							<button class="button-disconnect input-small" type="submit">Disconnect</button>
							<span>
							<b><span id="device-name">unknown name</span></b><div id="device-connection-status" />
							<span class="update-version-device"></span>
							<input type="checkbox" id="show-advanced" style="margin-left: 10px;" />
							</span>
							<label for="show-advanced">Beta</label>
						</span>
						<nav>
							<a href="#device-update" active>Device update</a>
							<a href="#sample-manager">Sample manager</a>
						</nav>
					</header>
					
					<Scene id="scene-utility-tools">
						<View name="device-update" active>
								<div class="main-content">
								<Scene id="scene-updater">
									<View name="loading" active>Waiting for device info</View>
									<View name="update-available">
										<div class="flex-center-col" style="gap: 15px;">
											<h1>New update available</h1>
											<span class="tagline">Your device is ready to be updated</span>
											<span><span class="update-version-device"></span> ➔ <span class="update-version-to"></span></span>
											<button class="update-buttons" style="background-color: #B7FF9E;">Start update</button>
										</div>
									</View>
									<View name="downgrade-available">
										<div class="flex-center-col" style="gap: 15px;">
											<h1>Downgrade available</h1>
											<span class="tagline">Your device running a beta firmware. Downgrade to stable release</span>
											<span><span class="update-version-device"></span> ➔ <span class="update-version-to"></span></span>
											<button class="update-buttons" style="background-color: #fffb9e;">Start downgrade</button>
										</div>
									</View>
									<View name="updating">
										<div class="flex-center-col" style="gap: 15px;">
											<h1>Updating</h1>
											<p>
												<span id="update-stage-fetch" class="update-stage">fetching new firmware</span><br/>
												<span id="update-stage-uploading" class="update-stage">uploading firmware <span id="upload-status"></span></span><br/>
												<span id="update-stage-applying" class="update-stage">applying update (waiting on device)</span><br/>
												<span id="update-stage-verifying" class="update-stage">verifying update</span><br/>
												<span id="update-stage-done" class="update-stage">done!</span>
											</p>
										</div>
									</View>
									<View name="updated">
										<div class="flex-center-col" style="gap: 15px;">
											<h1>your device is up to date!</h1>
											<span class="tagline">Your device is running the newest firmware. To get notifications when new firmware versions are available, add your email at the bottom of this page.</span>
											<button class="button-disconnect">Disconnect</button>
										</div>
									</View>
								</Scene>
								<br/>
								<br/>
								<div>
									<h3>Changelog</h3>
									<div id="changelog"></div>
								</div>
							</div>
							</View>
							<View name="sample-manager">
								<div class="main-content">
									<div class="flex-center-col" style="gap: 15px;">
										
									</div>
								</div>
							</View>
						</Scene>
				</View>

			</Scene>
			<br />
			<hr />
			<DeviceUpdateSubscribe style="margin: 30px 0px;" />
		</section>
		<Footer />
	</main>
</Layout>

<script>
import {parseChangelog, Changelog} from '~/js/parsers/changelog_parser';
import {MCUManager} from '~/js/mcumgr/mcumgr.js';
import { ImageManager, ImageFirmwareVersion, imageIsNewer} from '~/js/mcumgr/ImageManager';
import Scene from '~/lit/scene';
import {getOperatingSystem, OperatingSystem} from '~/js/utils/operating_system';
import {$} from '~/js/utils/$';

/* all elements used */ 
const connectProblemNote = $('#connect-problem-note') as HTMLSpanElement;
const connectBrowserSupportNote = $('#browser-support-note') as HTMLSpanElement;
const connectButton = $('#button-connect') as HTMLButtonElement;
const disconnectButtons = $('.button-disconnect') as NodeListOf<HTMLButtonElement>;
const deviceName = $('#device-name') as HTMLSpanElement;
const deviceConnectionStatus = $('#device-connection-status') as HTMLDivElement;
const updateVersionDevice = $('.update-version-device') as NodeListOf<HTMLSpanElement>;
const updateButtons = $('.update-buttons') as NodeListOf<HTMLButtonElement>;
const uploadStatus = $('#upload-status') as HTMLButtonElement;
const changelog =$('#changelog') as HTMLDivElement;
const checkboxAdvanced = $('#show-advanced') as HTMLInputElement;

const product_name = "MONKEY";
const mcumgr = new MCUManager();
const imageManager = new ImageManager(mcumgr);

let advancedOptions = false;	
let connectionReestablishedResolver: (value: unknown) => void | null = null;
let firmwareVersions: Changelog = null;
let deviceFirmwareVersion: ImageFirmwareVersion = null;

/* initialise the view */
type MainSceneViews = 'disconnected' | 'connected';
const mainScene = document.getElementById('scene-main') as Scene<MainSceneViews>;

type BluetoothSceneViews = 'checking' | 'unavailable' | 'available';
const bluetoothScene = document.getElementById('scene-bluetooth') as Scene<BluetoothSceneViews>;

type UtilityToolsScene = 'device-update' | 'sample-manager';
const utilityToolsScene = document.getElementById('scene-utility-tools') as Scene<UtilityToolsScene>;

type UpdateScreens = 'loading' | 'update-available' | 'downgrade-available' | 'updating' | 'updated';
const updateScene = document.getElementById('scene-updater') as Scene<UpdateScreens>;

Scene.ready.then(() => {
	// @ts-ignore: Ignore TypeScript error for bluetooth property because its not yet part of linter
	if (navigator && navigator.bluetooth && navigator.bluetooth.getAvailability()) {
		bluetoothScene.set('available')
	} else {
		const browserNotes: { [key in OperatingSystem]: string } = {
			'MacOS': 'On <u>macOS</u> we recommend to use Chrome or a Chrome based browser.',
			'Windows': 'On <u>Windows</u> we recommend to use Chrome or a Chrome based browser.',
			'Linux': 'On <u>Linux</u> we recommend to use Chrome or a Chrome based browser.',
			'Android': 'On <u>Android</u> we recommend to use Chrome or a Chrome based browser.',
			'iOS': 'On iPhone and iPad you can use a browser named <u>Bluefy</u>.',
			'Unknown': 'We recommend to use Chrome or a Chrome based browser.',
		}
		const browser = getOperatingSystem();
		connectBrowserSupportNote.innerHTML = browserNotes[browser];
		bluetoothScene.set('unavailable')
	}
});

/* elements end */ 

mcumgr.onDeviceSelection = () => {
	connectButton.disabled = true;
}
mcumgr.onDeviceSelectionCancel = () => {
	connectButton.disabled = false;
	connectProblemNote.classList.remove('hidden');
}

mcumgr.onConnecting = () => {
	connectButton.disabled = true;
	connectButton.innerText = 'Connecting...';
}
mcumgr.onConnect = () => {
	deviceConnectionStatus.style.backgroundColor = '#45C367'; // red: EA5124
	deviceName.innerText = mcumgr.name;
	getDeviceFirmware();
	getFirmwareUpdates();
	
	mainScene.set('connected');
}

const defaultButtonText = connectButton.innerText;
mcumgr.onDisconnect = () => {
	connectButton.disabled = false;
	connectButton.innerText = defaultButtonText;
	mainScene.set('disconnected');
	changelog.innerHTML = "";
}

mcumgr.onConnectionLoss = () => deviceConnectionStatus.style.backgroundColor = '#E89209';
mcumgr.onConnectionReestablished = async () => {
	deviceConnectionStatus.style.backgroundColor = '#45C367';
	connectionReestablishedResolver?.(null);
	if (updateScene.get() != 'updating') {
		getDeviceFirmware();
	}
}

function updateActiveLinkAndScene() {
    const currentHash = window.location.hash;

    // Remove "active" class from all <a> tags
    document.querySelectorAll('nav a').forEach(link => {
		link.removeAttribute('active');
    });

    // Add "active" class to the current <a> tag
    const activeLink = document.querySelector(`nav a[href="${currentHash}"]`);
    if (activeLink) {
        activeLink.setAttribute('active', '');
    }

    // Your existing logic for setting scenes
    if (currentHash === '#device-update') {
        utilityToolsScene.set('device-update');
    } else if (currentHash === '#sample-manager') {
        utilityToolsScene.set('sample-manager');
    }
}

// Run on page load
updateActiveLinkAndScene();

// Run on hashchange
window.addEventListener('hashchange', updateActiveLinkAndScene);

connectButton.addEventListener('click', async () => {
	const BT_MIDI_SERVICE_UUID = '03B80E5A-EDE8-4B33-A751-6CE34EC4C700'.toLowerCase()
	let filters = [{namePrefix: 'WAVY MONKEY', services: [BT_MIDI_SERVICE_UUID]}]
	await mcumgr.connect(filters);
});

disconnectButtons.forEach((button) => {
	button.addEventListener('click', async () => {
		mcumgr.disconnect();
	});
});

checkboxAdvanced.addEventListener('change', () => {
	advancedOptions = checkboxAdvanced.checked;
	updateAvailableUpdate();
});

updateButtons.forEach((button) => {
	button.addEventListener('click', deviceUpdateScript);
});

async function getFirmwareUpdates() {
	const response = await fetch(`/firmware/${product_name}/changelog.md`);
	const data = await response.text();
	firmwareVersions = parseChangelog(data);
	console.log(firmwareVersions);
	updateAvailableUpdate();
}

async function getDeviceFirmware() {
	const fw = await imageManager.getFirmwareVersion();
	deviceFirmwareVersion = fw;
	updateAvailableUpdate();
}

function updateAvailableUpdate() {
    if (!deviceFirmwareVersion || !firmwareVersions) {
        return;
    }

    // Set versions in HTML
	updateVersionDevice.forEach((element) => {
		element.innerText = deviceFirmwareVersion.versionString;
	});

    const to = $('.update-version-to') as NodeListOf<HTMLSpanElement>;
	to.forEach((element) => {
		element.innerText = (advancedOptions && imageIsNewer(firmwareVersions.dev, firmwareVersions.release)) ? firmwareVersions.dev.versionString + ' [BETA]' : firmwareVersions.release.versionString;
	});

    let hasNewRelease = false;
    let hasDowngrade = true;
	let lastWasNew = false;

    let changes = "";
    firmwareVersions.versions.forEach((version) => {
        if ((version.isDev && !advancedOptions) || version.isObsolete) {
            return;
        }

        const isNewerThanDevice = imageIsNewer(deviceFirmwareVersion, version.version);
        const isSameVersion = deviceFirmwareVersion.versionString === version.version.versionString;

		// we have new release if we find any which are greater than current version
        if (isNewerThanDevice) {
			hasNewRelease = true;
		} 
		// we have downgrade if we dont find any versions which are equal or greater than current version
		if (isNewerThanDevice || isSameVersion) { // 
			hasDowngrade = false;
		}

		if (!isNewerThanDevice && lastWasNew) {
			changes += `<hr width="100%" />`;
		}

		lastWasNew = isNewerThanDevice;

        changes += `
            <div class="changelog-item" style="${version.isDev ? 'background-color: #eee;' : ''}"" ${isNewerThanDevice ? 'new' : ''}>
                <p><b>${version.version.versionString}${version.highlight ? ' ' + version.highlight : ''}${version.isDev ? ' [BETA]' : ''}</b><span><i>${version.date ?? ''}</i></span></p>
                ${version.changes.map(change => `- ${change}<br/>`).join('')}
            </div>
        `;
    });
    changelog.innerHTML = changes;

    if (hasNewRelease) {
        updateScene.set('update-available');
    } else if (hasDowngrade) {
        updateScene.set('downgrade-available');
    } else {
        updateScene.set('updated');
    }
}

async function deviceUpdateScript() {
	try {
		// update stage elements
		const updateStageFetch = $('#update-stage-fetch') as HTMLParagraphElement;
		const updateStageUploading = $('#update-stage-uploading') as HTMLParagraphElement;
		const updateStageApplying = $('#update-stage-applying') as HTMLParagraphElement;
		const updateStageVerifying = $('#update-stage-verifying') as HTMLParagraphElement;
		const updateStageDone = $('#update-stage-done') as HTMLParagraphElement;

		// prepare stages by removing active and done tags
		updateStageFetch.removeAttribute('active');
		updateStageUploading.removeAttribute('active');
		updateStageApplying.removeAttribute('active');
		updateStageVerifying.removeAttribute('active');
		updateStageDone.removeAttribute('active');

		updateStageFetch.removeAttribute('done');
		updateStageUploading.removeAttribute('done');
		updateStageApplying.removeAttribute('done');
		updateStageVerifying.removeAttribute('done');
		updateStageDone.removeAttribute('done');

		uploadStatus.innerText = "";
		
		// show stage
		updateScene.set('updating');
		
		updateStageFetch.setAttribute('active', '');
		const firmwareVersion = advancedOptions ? firmwareVersions.dev.versionString : firmwareVersions.release.versionString;
		const image = await fetch(`/firmware/${product_name}/app\_update_${firmwareVersion}.bin`)
		.then(res => res.arrayBuffer())
		updateStageFetch.removeAttribute('active');
		updateStageFetch.setAttribute('done', '');

		updateStageUploading.setAttribute('active', '');
		uploadStatus.innerText = "(preparing)";
		await imageManager.uploadImage(image, (percent) => {uploadStatus.innerText = `(${percent}%)`});
		updateStageUploading.removeAttribute('active');
		updateStageUploading.setAttribute('done', '');
		
		const waitForUpdateApplied = new Promise((resolve, _) => connectionReestablishedResolver = resolve);

		updateStageApplying.setAttribute('active', '');
		await waitForUpdateApplied;
		updateStageApplying.removeAttribute('active');
		updateStageApplying.setAttribute('done', '');

		updateStageVerifying.setAttribute('active', '');
		deviceFirmwareVersion = await imageManager.getFirmwareVersion();
		if (deviceFirmwareVersion.versionString != firmwareVersion) {throw new Error(`Update failed: Device firmware version is ${deviceFirmwareVersion.versionString} but expected ${firmwareVersion}`);}
		updateStageVerifying.removeAttribute('active');
		updateStageVerifying.setAttribute('done', '');

		updateStageDone.setAttribute('done'	, '');

		// timeout of 1 second using await
		await new Promise((resolve, _) => setTimeout(resolve, 2000));

		updateAvailableUpdate();

	} catch (e) {
		console.error(e);
		updateScene.set('update-available');
	}
}
</script>