---
import Layout from "~/layouts/Layout.astro"
import Header from "~/layouts/Header.astro"
import Footer from "~/layouts/Footer.astro"
---

<Layout title="Device update adv - Wavy Industries">
    <main>
        <Header />
        <section>
            <h1>Device update advanced</h1>
            <div class="starter-template">
                <div class="content" id="initial-screen">
                    <div class="alert alert-primary" role="alert" id="bluetooth-is-available">
                        <b><span id="bluetooth-is-available-message"></span></b>
                        This tool is compatible with desktops (or laptops) with the <b>latest Chrome, Opera and Edge</b> browsers, and working
                        Bluetooth connection (most laptops have them these days). You can also try it from Chrome on Android, or Bluefy on iOS/iPadOS.
                    </div>
                    <div id="connect-block" style="display: none;">
                        <div class="form-group form-inline">
                            <div class="col-auto">
                                <button id="button-connect" type="submit" class="btn btn-primary"><i class="bi-bluetooth"></i> Connect</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="content" id="connecting-screen" style="display: none;">
                    <div class="alert alert-primary" role="alert">
                        Connecting...
                      </div>
                </div>
                <div class="content" id="connected-screen" style="display: none;">
                    <h2 id="device-name"></h2>
                    <div class="container">
                        <div>
                            <button id="button-echo" type="submit" class="btn btn-primary"><i class="bi-soundwave"></i> Echo</button>
                            <button id="button-disconnect" type="submit" class="btn btn-secondary"><i class="bi-x-square"></i> Disconnect</button>
                            <button id="button-reset" type="submit" class="btn btn-info"><i class="bi-arrow-clockwise"></i> Reset</button>
                        </div>
                        <hr />
                        <h3>Images</h3>
                        <div id="image-list"></div>
                        <div>
                            <button id="button-image-state" type="submit" class="btn btn-info"><i class="bi-arrow-down-circle"></i> Refresh</button>
                            <button id="button-erase" type="submit" class="btn btn-warning"><i class="bi-eraser-fill"></i> Erase</button>
                            <button id="button-test" type="submit" class="btn btn-primary" disabled><i class="bi-question-square"></i> Test</button>
                            <button id="button-confirm" type="submit" class="btn btn-success" disabled><i class="bi-check2-square"></i> Confirm</button>
                        </div>
                        <hr />
                        <h3>SMP mcumgr custom command</h3>
                        <input type="number" id="smp-group" placeholder="Group ID" />
                        <input type="number" id="smp-command" placeholder="Command ID" />
                        <!-- select drop down -->
                        <select id="smp-select">
                            <option value="0">Read</option>
                            <option value="1">Read w/ response</option>
                            <option value="2">Write</option>
                            <option value="3">Write w/ response</option>
                        </select>
                        <input type="text" id="smp-data" placeholder="Data" />
                        <button id="button-smp" type="submit" class="btn btn-primary"><i class="bi-gear"></i> Send</button>
                        <hr />
                        <h3>Image Upload</h3>
                        <div class="form-group">
                            <input type="file" class="form-control" id="file-image" />
                        </div>
                        <div class="image">
                            <div class="form-group">
                                <div id="file-status">Select image file (.img)</div>
                                <div id="file-info"></div>
                            </div>
                            <button class="btn btn-primary" id="file-upload" disabled><i class="bi-upload"></i> Upload</button>
                        </div>
                    </div>
                </div>
            </div>
            
        </section>
        <Footer />
    </main>
</Layout>

<style>
main {
	min-height: 100vh;
	display: flex;
	flex-direction: column;
}
</style>

<script>
import {MCUManager, MGMT_OP_REVERSE, MGMT_GROUP_ID, OS_MGMT_ID, IMG_MGMT_ID, SMP_ERR_RC} from '~/js/mcumgr.js';
import {imageInfo,  Log} from '~/js/utilities.js';

let log = new Log('main', Log.LEVEL_DEBUG);

const screens = {
    initial: document.getElementById('initial-screen'),
    connecting: document.getElementById('connecting-screen'),
    connected: document.getElementById('connected-screen')
};

const deviceName = document.getElementById('device-name');
const connectButton = document.getElementById('button-connect') as HTMLButtonElement;
const echoButton = document.getElementById('button-echo') as HTMLButtonElement;
const disconnectButton = document.getElementById('button-disconnect') as HTMLButtonElement;
const resetButton = document.getElementById('button-reset') as HTMLButtonElement;
const imageStateButton = document.getElementById('button-image-state');
const eraseButton = document.getElementById('button-erase') as HTMLButtonElement;
const testButton = document.getElementById('button-test') as HTMLButtonElement;
const confirmButton = document.getElementById('button-confirm') as HTMLButtonElement;
const imageList = document.getElementById('image-list');
const fileInfo = document.getElementById('file-info');
const fileStatus = document.getElementById('file-status');
const fileImage = document.getElementById('file-image') as HTMLInputElement;
const fileUpload = document.getElementById('file-upload')as HTMLButtonElement;
const bluetoothIsAvailable = document.getElementById('bluetooth-is-available');
const bluetoothIsAvailableMessage = document.getElementById('bluetooth-is-available-message');
const connectBlock = document.getElementById('connect-block');

// SMP elements
const smpGroup = document.getElementById('smp-group') as HTMLInputElement;
const smpCommand = document.getElementById('smp-command') as HTMLInputElement;
const smpSelect = document.getElementById('smp-select') as HTMLSelectElement;
const smpData = document.getElementById('smp-data') as HTMLInputElement;
const smpButton = document.getElementById('button-smp') as HTMLButtonElement;

// @ts-ignore: Ignore TypeScript error for bluetooth property because its not yet part of linter
if (navigator && navigator.bluetooth && navigator.bluetooth.getAvailability()) {
    bluetoothIsAvailableMessage.innerText = 'Bluetooth is available in your browser.';
    bluetoothIsAvailable.className = 'alert alert-success';
    connectBlock.style.display = 'block';
} else {
    bluetoothIsAvailable.className = 'alert alert-danger';
    bluetoothIsAvailableMessage.innerText = 'Bluetooth is not available in your browser.';
}

let file = null;
let fileData = null;
let images = [];

const mcumgr = new MCUManager();
mcumgr.onConnecting(() => {
    log.debug('Connecting...');
    screens.initial.style.display = 'none';
    screens.connected.style.display = 'none';
    screens.connecting.style.display = 'block';
});
mcumgr.onConnect(() => {
    deviceName.innerText = mcumgr.name;
    screens.connecting.style.display = 'none';
    screens.initial.style.display = 'none';
    screens.connected.style.display = 'block';
    imageList.innerHTML = '';
});
mcumgr.onDisconnect(() => {
    deviceName.innerText = 'Connect your device';
    screens.connecting.style.display = 'none';
    screens.connected.style.display = 'none';
    screens.initial.style.display = 'block';
});

mcumgr.onMessage(({ op, group, id, data, length }) => {
    log.debug(`Received SMP: op ${MGMT_OP_REVERSE[op]}, group ${group}, id ${id}, length ${length}`);
    if (data.rc !== undefined && data.rc !== 0) {
        log.error(`Error: ${SMP_ERR_RC[data.rc]}`);
        log.error(data);
        return;
    }

    switch (group) {
        case MGMT_GROUP_ID.OS:
            switch (id) {
                case OS_MGMT_ID.ECHO:
                    alert(data.r);
                    break;
                case OS_MGMT_ID.TASKSTAT:
                    console.table(data.tasks);
                    break;
                case OS_MGMT_ID.MPSTAT:
                    log.info(data);
                    break;
            }
            break;
        case MGMT_GROUP_ID.IMAGE:
            switch (id) {
                case IMG_MGMT_ID.STATE:
                    images = data.images;
                    let imagesHTML = '';
                    images.forEach(image => {
                        imagesHTML += `<div class="image ${image.active ? 'active' : 'standby'}">`;
                        imagesHTML += `<h2>Slot #${image.slot} ${image.active ? 'active' : 'standby'}</h2>`;
                        imagesHTML += '<table>';
                        const hashStr = Array.from(image.hash).map(byte => (byte as number).toString(16).padStart(2, '0')).join('');
                        imagesHTML += `<tr><th>Version</th><td>v${image.version}</td></tr>`;
                        imagesHTML += `<tr><th>Bootable</th><td>${image.bootable}</td></tr>`;
                        imagesHTML += `<tr><th>Confirmed</th><td>${image.confirmed}</td></tr>`;
                        imagesHTML += `<tr><th>Pending</th><td>${image.pending}</td></tr>`;
                        imagesHTML += `<tr><th>Hash</th><td>${hashStr}</td></tr>`;
                        imagesHTML += '</table>';
                        imagesHTML += '</div>';
                    });
                    imageList.innerHTML = imagesHTML;

                    testButton.disabled = !(data.images.length > 1 && data.images[1].pending === false);
                    confirmButton.disabled = !(data.images.length > 0 && data.images[0].confirmed === false);
                    break;
            }
            break;
        default:
            log.warning(`Unknown SMP response: group ${group}, id ${id}, op ${op}`);
            log.warning(data);
            break;
    }
});

mcumgr.onImageUploadProgress(({ percentage }) => {
    fileStatus.innerText = `Uploading... ${percentage}%`;
});

mcumgr.onImageUploadFinished(() => {
    fileStatus.innerText = 'Upload complete';
    fileInfo.innerHTML = '';
    fileImage.value = '';
    mcumgr.cmdImageState();
});

fileImage.addEventListener('change', () => {
    file = fileImage.files[0];
    fileData = null;
    const reader = new FileReader();
    reader.onload = async () => {
        fileData = reader.result;
        try {
            const info = await imageInfo(fileData);
            let table = `<table>`
            table += `<tr><th>Version</th><td>v${info.version}</td></tr>`;
            table += `<tr><th>Hash</th><td>${info.hash}</td></tr>`;
            table += `<tr><th>File Size</th><td>${fileData.byteLength} bytes</td></tr>`;
            table += `<tr><th>Size</th><td>${info.imageSize} bytes</td></tr>`;
            table += `</table>`;

            fileStatus.innerText = 'Ready to upload';
            fileInfo.innerHTML = table;
            fileUpload.disabled = false;
        } catch (e) {
            fileInfo.innerHTML = `ERROR: ${e.message}`;
        }
    };
    reader.readAsArrayBuffer(file);
});
fileUpload.addEventListener('click', event => {
    fileUpload.disabled = true;
    event.stopPropagation();
    if (file && fileData) {
        mcumgr.cmdUpload(fileData);
    }
});

connectButton.addEventListener('click', async () => {
    const BT_MIDI_SERVICE_UUID = '03B80E5A-EDE8-4B33-A751-6CE34EC4C700'.toLowerCase()
	let filters = [{namePrefix: 'WAVY MONKEY', services: [BT_MIDI_SERVICE_UUID]}]
    await mcumgr.connect(filters);
});

disconnectButton.addEventListener('click', async () => {
    mcumgr.disconnect();
});

echoButton.addEventListener('click', async () => {
    const message = prompt('Enter a text message to send', 'Hello World!');
    await mcumgr.smpEcho(message);
});

resetButton.addEventListener('click', async () => {
    await mcumgr.cmdReset();
});

imageStateButton.addEventListener('click', async () => {
    await mcumgr.cmdImageState();
});

eraseButton.addEventListener('click', async () => {
    await mcumgr.cmdImageErase();
});

testButton.addEventListener('click', async () => {
    if (images.length > 1 && images[1].pending === false) {
        await mcumgr.cmdImageTest(images[1].hash);
    }
});

confirmButton.addEventListener('click', async () => {
    if (images.length > 0 && images[0].confirmed === false) {
        await mcumgr.cmdImageConfirm(images[0].hash);
    }
});

smpButton.addEventListener('click', async () => {
    const group = parseInt(smpGroup.value);
    const command = parseInt(smpCommand.value);
    const op = parseInt(smpSelect.value);
    /* load data */
    const data_raw = smpData.value.split(' ').map(Number);
    // const message = {
    //     data: new Uint8Array(data_raw),
    //     len: 8,
    //     off: 0,
    // }
    const message = [8, 0, ...data_raw];
    log.debug(`Sending SMP custom command: group group ${group}, command ${command}, op ${op}`);
    log.debug(message);

    await mcumgr.cmdCustom(group, command, op, message, false);
});

</script>